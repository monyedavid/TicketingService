type Subscription {
    # Reply ticket in private channel
    # accesible only customer who raised ticket & any admin
    replyTicket(ticketId: String!): ITicketComment!

    # Add a new Ticket to raise-new-ticket channel
    # Tickets can only be raised by customers?!
    raiseTicket: Ticket!
}

type Query {
    # Return all active Tickets - Admin protceted route
    openTickets: QTD!

    # Return all in-active Tickets - Admin protceted route
    closedTickets: QTD!

    # Load all tickets made by customer
    # Filter open or closed
    myTickets(open: Boolean!): QTD!

    # Load comments on ticket
    # Admin(s) & Customer owner of ticket access restriction
    loadTCommentHistory(ticketId: String!): QTcD!

    # Subscriptions Queries ☜(ﾟヮﾟ☜)

    # Reply ticket in private channel
    # accesible only customer who raised ticket & any admin
        # can be rejcetd
    replyTicket(ticketId: String!): T_response!

    # Add a new Ticket to raise-new-ticket channel
    # Tickets can only be raised by customers?!
        # can be rejcetd
    raiseTicket(request: String!): T_response!

}

type QTD { # Query Ticket Data ->> excludes comments must be requested?
    ok: Boolean!
    message: String
    status: Int!
    error: [Error!]
    # Data -> Tickets or Comments under a Ticket
    data: [Ticket]
}

type QTcD { # Query Ticket-Comment Data
    # ->> explicit request of ticket comments
    ok: Boolean!
    message: String
    status: Int!
    error: [Error!]
    # Data -> Tickets or Comments under a Ticket
    data: [CommentsHistory]
}

type Ticket {
    id: ID!
    open: Boolean
    request: String!
    owner: ID! # Customer who requested ticket (*￣3￣)╭
    createdDate: Date!
}

type CommentsHistory {
    ticketId: String! # Ticket ID
    open: Boolean! # State of Ticket ID
    comments: [ITicketComment] # Comments on Ticket ID
}

type ITicketComment {
    user_id: ID!
    full_name: String!
    comment: String!
    createdAt: Date!
    admin: Boolean! # Was this comment made by admin?
}
